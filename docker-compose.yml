version: "3.9"

services:
  # Redis Service
  redis:
    image: redis:alpine
    container_name: task-queue-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-supersecretpassword}"]
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - task-queue-network

  # Golang Task Queue Service
  task_queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-queue-app
    environment:
      # App Config
      - APP_PORT=${APP_PORT:-:8001}
      
      # Redis Config
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-supersecretpassword}
      - KEY_REDIS_SEND=${KEY_REDIS_SEND:-queue_image_raw}
      - KEY_REDIS_GET=${KEY_REDIS_GET:-queue_image_predicted}
      
      # AWS Config
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-southeast-1}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_PATH_BUCKET=${AWS_PATH_BUCKET:-predicted}
      
      # MQTT Config
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT:-1883}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_TOPIC=${MQTT_TOPIC}
      - CLIENT_MQTT_ID=${CLIENT_MQTT_ID:-task_queue_client}
      
      # Worker Config
      - WORKER=${WORKER:-2}
      
      # Directory Config
      - BASE_DIR_SEND=${BASE_DIR_SEND:-/data/images/}
      - BASE_DIR_GET=${BASE_DIR_GET:-/data/predicted/}
      
      # Security
      - API_KEY=${API_KEY}
    
    depends_on:
      redis:
        condition: service_healthy
    
    ports:
      - "${APP_PORT:-8001}:8001"
    
    volumes:
      - shared_images:/data/images
      - shared_predicted:/data/predicted
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    restart: unless-stopped
    
    networks:
      - task-queue-network

volumes:
  redis_data:
    driver: local
  shared_images:
    driver: local
  shared_predicted:
    driver: local

networks:
  task-queue-network:
    driver: bridge